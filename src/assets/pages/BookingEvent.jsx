import React, { useEffect, useState } from 'react'
import { useLocation, useNavigate, useParams } from 'react-router-dom'

const BookingEvent = () => {
    const navigate = useNavigate()
    const {id} = useParams()
    const [event, setEvent] = useState({})
    const [formData, setFormData] = useState({eventId: id, firstName: '', lastName: '', email: '', streetName: '', postalCode: '', city: '', ticketQuantity: 1, selectedPackage: '', totalPrice: 0})

    const location = useLocation()

    useEffect(() => {
        getEvent()
    }, [])

    const getEvent = async () => {
        try{
            const res = await fetch(`https://ventixe-hvddgje2fmbjakgk.swedencentral-01.azurewebsites.net/api/events/${id}`)
            if (!res.ok) throw new Error("Failed to fetch event") 

            const data = await res.json()
            setEvent(data.result)
        } catch (err) {
            console.error(err)
        }
        
    }

    const postBooking = async () => {
        try {
            const res = await fetch(`https://ventixe--bookingservice-c4h3a2hsdxfadudb.swedencentral-01.azurewebsites.net/api/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })

            if (!res.ok){
                console.error("Booking failed")
            } else {
                console.log("Booking Successful")
                navigate('/')
            }
        } catch(err) {
            console.error("Error submitting booking", err)
        }

    }

    /*Method to calculate totalprice generated by chatGPT*/
    const handleChange = (e) => {
        const { name, value } = e.target;

        let newFormData = {
            ...formData,
            [name]: name === "ticketQuantity" ? parseInt(value) : value
        };

        const selectedPackage = event?.packages?.find(
            pkg => pkg.title === (name === "selectedPackage" ? value : formData.selectedPackage)
        );

        const quantity = name === "ticketQuantity" ? parseInt(value) : formData.ticketQuantity;

        if (selectedPackage) {
            newFormData.totalPrice = selectedPackage.price * quantity;
        } else {
            newFormData.totalPrice = 0;
        }

        setFormData(newFormData);
    }

    const handleSubmit = async (e) => {
        e.preventDefault()
        await postBooking()
    }

    return (
        
        <div className="form-container">
            <form onSubmit={handleSubmit} noValidate>
                
                <div className="form-group">
                    <label className="form-label">First Name</label>
                    <input className="form-input" type="text" name="firstName" value={formData.firstName} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">Last Name</label>
                    <input className="form-input" type="text" name="lastName" value={formData.lastName} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">E-mail</label>
                    <input className="form-input" type="email" name="email" value={formData.email} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">Street Name</label>
                    <input className="form-input" type="text" name="streetName" value={formData.streetName} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">Postal Code</label>
                    <input className="form-input" type="text" name="postalCode" value={formData.postalCode} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">City</label>
                    <input className="form-input" type="text" name="city" value={formData.city} onChange={handleChange} required />
                </div>
                <div className="form-group">
                    <label className="form-label">Package</label>
                    <select className="form-input" value={formData.selectedPackage} name="selectedPackage" id="Packages" onChange={handleChange} required>
                        <option value="" disabled>-- Select Package --</option>
                        {event?.packages?.map((pkg, index) => (
                            <option key={index} value={pkg.title}>
                                {pkg.title} -- {pkg.currency}{pkg.price}
                            </option>
                        ))}
                    </select>
                </div>
                <div className="form-group">
                    <label className="form-label">Ticket Quantity</label>
                    <select className="form-input" value={formData.ticketQuantity} name="ticketQuantity" onChange={handleChange} required>
                    {[...Array(10).keys()].map (i => (
                        <option key={i + 1} value={i + 1}>
                            {i + 1}
                        </option>
                    ))}
                    </select>
                </div>
                <div className="form-group">
                    <h4>Total Price:</h4> {formData.totalPrice}{event?.packages?.[0]?.currency || ''}
                </div>
                <button className="btn-purple" type="submit">Book Now</button>
            </form>
        </div>
    )
}


export default BookingEvent